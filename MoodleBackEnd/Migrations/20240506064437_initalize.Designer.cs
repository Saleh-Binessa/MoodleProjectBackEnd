// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoodleBackEnd.Models.Entites;

#nullable disable

namespace MoodleBackEnd.Migrations
{
    [DbContext(typeof(MoodleContext))]
    [Migration("20240506064437_initalize")]
    partial class initalize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.GradeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId")
                        .IsUnique();

                    b.ToTable("GradeEntity");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.MaterialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.MaterialTask", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("MaterialId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("MaterialTask");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.PhaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.PhaseMaterial", b =>
                {
                    b.Property<int>("PhaseId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("PhaseId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("PhaseMaterial");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.SubmissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SubmissionLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("SubmissionEntity");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.Users.InstructorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.Users.StudentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CourseId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.Users.UserAccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.GradeEntity", b =>
                {
                    b.HasOne("MoodleBackEnd.Models.Entites.SubmissionEntity", "Submission")
                        .WithOne("Grade")
                        .HasForeignKey("MoodleBackEnd.Models.Entites.GradeEntity", "SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.MaterialTask", b =>
                {
                    b.HasOne("MoodleBackEnd.Models.Entites.MaterialEntity", "Material")
                        .WithMany("Tasks")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoodleBackEnd.Models.Entites.TaskEntity", "Task")
                        .WithMany("Materials")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.PhaseEntity", b =>
                {
                    b.HasOne("MoodleBackEnd.Models.Entites.CourseEntity", "Course")
                        .WithMany("Phases")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.PhaseMaterial", b =>
                {
                    b.HasOne("MoodleBackEnd.Models.Entites.MaterialEntity", "Material")
                        .WithMany("Phases")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoodleBackEnd.Models.Entites.PhaseEntity", "Phase")
                        .WithMany("Materials")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.SubmissionEntity", b =>
                {
                    b.HasOne("MoodleBackEnd.Models.Entites.TaskEntity", "Task")
                        .WithOne("Submission")
                        .HasForeignKey("MoodleBackEnd.Models.Entites.SubmissionEntity", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.Users.StudentEntity", b =>
                {
                    b.HasOne("MoodleBackEnd.Models.Entites.Users.UserAccountEntity", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoodleBackEnd.Models.Entites.CourseEntity", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.CourseEntity", b =>
                {
                    b.Navigation("Phases");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.MaterialEntity", b =>
                {
                    b.Navigation("Phases");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.PhaseEntity", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.SubmissionEntity", b =>
                {
                    b.Navigation("Grade")
                        .IsRequired();
                });

            modelBuilder.Entity("MoodleBackEnd.Models.Entites.TaskEntity", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("Submission")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
