@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@using MoodleBackEnd.Models.Requests
@using MoodleBackEnd.Models.Entites.Users

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="form-container p-5 bg-light rounded shadow-lg" style="width: 400px;">
        <h2 class="text-center mb-4">Register for Coded Dashboard</h2>
        <EditForm Model="signupModel" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="name" class="form-label text-center w-100">Name</label>
                <InputText id="name" @bind-Value="signupModel.Name" class="form-control" Placeholder="Enter your name" />
                <ValidationMessage For="@(() => signupModel.Name)" />
            </div>

            <div class="form-group mb-3">
                <label for="username" class="form-label text-center w-100">Username</label>
                <InputText id="username" @bind-Value="signupModel.Username" class="form-control" Placeholder="Enter your username" />
                <ValidationMessage For="@(() => signupModel.Username)" />
            </div>

            <div class="form-group mb-3">
                <label for="email" class="form-label text-center w-100">Email</label>
                <InputText id="email" @bind-Value="signupModel.Email" class="form-control" Placeholder="Enter your email" />
                <ValidationMessage For="@(() => signupModel.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password" class="form-label text-center w-100">Password</label>
                <InputText id="password" @bind-Value="signupModel.Password" class="form-control" Placeholder="Enter your password" Type="password" />
                <ValidationMessage For="@(() => signupModel.Password)" />
            </div>

            <div class="form-group mb-3">
                <label for="accountType" class="form-label text-center w-100">Account Type</label>
                <select id="accountType" @bind="signupModel.AccountType" class="form-select">
                    <option value="Admin">Admin</option>
                    <option value="Instructor">Instructor</option>
                    <option value="Student">Student</option>
                </select>
                <ValidationMessage For="@(() => signupModel.AccountType)" />

            </div>

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="alert alert-danger mt-2">@errorMessage</div>
            }

            <button type="submit" class="btn btn-primary w-100">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private string errorMessage = string.Empty;

    private SignupRequest signupModel = new SignupRequest();

    private async Task RegisterUser()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7137/api/Login/Register", signupModel);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = $"Registration failed: {response.StatusCode} - {response.ReasonPhrase}";
        }
    }

    
}

